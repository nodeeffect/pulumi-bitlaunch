// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Bitlaunch
{
    public static class GetSize
    {
        /// <summary>
        /// Holds details on available size configurations for a server. Matches https://developers.bitlaunch.io/reference/host-size-object
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Bitlaunch = Pulumi.Bitlaunch;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var token = config.RequireObject&lt;dynamic&gt;("token");
        ///     var example = Bitlaunch.GetSize.Invoke(new()
        ///     {
        ///         Host = "DigitalOcean",
        ///         CpuCount = 2,
        ///         MemoryMb = 2048,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetSizeResult> InvokeAsync(GetSizeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSizeResult>("bitlaunch:index/getSize:getSize", args ?? new GetSizeArgs(), options.WithDefaults());

        /// <summary>
        /// Holds details on available size configurations for a server. Matches https://developers.bitlaunch.io/reference/host-size-object
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Bitlaunch = Pulumi.Bitlaunch;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var token = config.RequireObject&lt;dynamic&gt;("token");
        ///     var example = Bitlaunch.GetSize.Invoke(new()
        ///     {
        ///         Host = "DigitalOcean",
        ///         CpuCount = 2,
        ///         MemoryMb = 2048,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetSizeResult> Invoke(GetSizeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSizeResult>("bitlaunch:index/getSize:getSize", args ?? new GetSizeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSizeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The amount of vCPU's included.
        /// </summary>
        [Input("cpuCount")]
        public int? CpuCount { get; set; }

        /// <summary>
        /// The amount of disk space included.
        /// </summary>
        [Input("diskGb")]
        public int? DiskGb { get; set; }

        /// <summary>
        /// Host Provider (DigitalOcean, Vultr, etc.)
        /// </summary>
        [Input("host", required: true)]
        public string Host { get; set; } = null!;

        /// <summary>
        /// The amount of memory (RAM) included.
        /// </summary>
        [Input("memoryMb")]
        public int? MemoryMb { get; set; }

        public GetSizeArgs()
        {
        }
        public static new GetSizeArgs Empty => new GetSizeArgs();
    }

    public sealed class GetSizeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The amount of vCPU's included.
        /// </summary>
        [Input("cpuCount")]
        public Input<int>? CpuCount { get; set; }

        /// <summary>
        /// The amount of disk space included.
        /// </summary>
        [Input("diskGb")]
        public Input<int>? DiskGb { get; set; }

        /// <summary>
        /// Host Provider (DigitalOcean, Vultr, etc.)
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// The amount of memory (RAM) included.
        /// </summary>
        [Input("memoryMb")]
        public Input<int>? MemoryMb { get; set; }

        public GetSizeInvokeArgs()
        {
        }
        public static new GetSizeInvokeArgs Empty => new GetSizeInvokeArgs();
    }


    [OutputType]
    public sealed class GetSizeResult
    {
        /// <summary>
        /// The available monthly bandwidth in GB.
        /// </summary>
        public readonly int BandwidthGb;
        /// <summary>
        /// The amount of balance deducted per hour.
        /// </summary>
        public readonly int CostPerHour;
        /// <summary>
        /// The amount in USD charged per month.
        /// </summary>
        public readonly int CostPerMonth;
        /// <summary>
        /// The amount of vCPU's included.
        /// </summary>
        public readonly int? CpuCount;
        /// <summary>
        /// The amount of disk space included.
        /// </summary>
        public readonly int? DiskGb;
        /// <summary>
        /// Details on disks included with the size.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSizeDiskResult> Disks;
        /// <summary>
        /// Host Provider (DigitalOcean, Vultr, etc.)
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The amount of memory (RAM) included.
        /// </summary>
        public readonly int? MemoryMb;
        /// <summary>
        /// Some hosts offer a different plan type for different usage. You should refer to the host documentation for more information.
        /// </summary>
        public readonly string PlanType;
        /// <summary>
        /// A human readable string.
        /// </summary>
        public readonly string Slug;

        [OutputConstructor]
        private GetSizeResult(
            int bandwidthGb,

            int costPerHour,

            int costPerMonth,

            int? cpuCount,

            int? diskGb,

            ImmutableArray<Outputs.GetSizeDiskResult> disks,

            string host,

            string id,

            int? memoryMb,

            string planType,

            string slug)
        {
            BandwidthGb = bandwidthGb;
            CostPerHour = costPerHour;
            CostPerMonth = costPerMonth;
            CpuCount = cpuCount;
            DiskGb = diskGb;
            Disks = disks;
            Host = host;
            Id = id;
            MemoryMb = memoryMb;
            PlanType = planType;
            Slug = slug;
        }
    }
}
