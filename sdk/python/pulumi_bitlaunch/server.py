# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ServerArgs', 'Server']

@pulumi.input_type
class ServerArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 image_id: pulumi.Input[str],
                 region_id: pulumi.Input[str],
                 size_id: pulumi.Input[str],
                 initscript: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 wait_for_ip: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Server resource.
        :param pulumi.Input[str] host: The host for the server to reside on.
        :param pulumi.Input[str] image_id: The image ID to use on the server.
        :param pulumi.Input[str] region_id: The region ID of the location that the server will reside at.
        :param pulumi.Input[str] size_id: The size ID of the server to be provisioned to.
        :param pulumi.Input[str] initscript: A script to run on first boot of the server. Only hosts with initScript enabled can use this feature.
        :param pulumi.Input[str] name: The name of the server.
        :param pulumi.Input[str] password: The root user password to set on the server. Must be used if no SSH keys designated.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_keys: An array of SSH key IDs to place on the server for authentication. Must be used if no password is designated of if the selected image does not support passwords.
        :param pulumi.Input[bool] wait_for_ip: Wait to get IP Address
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "size_id", size_id)
        if initscript is not None:
            pulumi.set(__self__, "initscript", initscript)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssh_keys is not None:
            pulumi.set(__self__, "ssh_keys", ssh_keys)
        if wait_for_ip is not None:
            pulumi.set(__self__, "wait_for_ip", wait_for_ip)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The host for the server to reside on.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Input[str]:
        """
        The image ID to use on the server.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Input[str]:
        """
        The region ID of the location that the server will reside at.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "region_id", value)

    @property
    @pulumi.getter(name="sizeId")
    def size_id(self) -> pulumi.Input[str]:
        """
        The size ID of the server to be provisioned to.
        """
        return pulumi.get(self, "size_id")

    @size_id.setter
    def size_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "size_id", value)

    @property
    @pulumi.getter
    def initscript(self) -> Optional[pulumi.Input[str]]:
        """
        A script to run on first boot of the server. Only hosts with initScript enabled can use this feature.
        """
        return pulumi.get(self, "initscript")

    @initscript.setter
    def initscript(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initscript", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the server.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The root user password to set on the server. Must be used if no SSH keys designated.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of SSH key IDs to place on the server for authentication. Must be used if no password is designated of if the selected image does not support passwords.
        """
        return pulumi.get(self, "ssh_keys")

    @ssh_keys.setter
    def ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssh_keys", value)

    @property
    @pulumi.getter(name="waitForIp")
    def wait_for_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        Wait to get IP Address
        """
        return pulumi.get(self, "wait_for_ip")

    @wait_for_ip.setter
    def wait_for_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wait_for_ip", value)


@pulumi.input_type
class _ServerState:
    def __init__(__self__, *,
                 created: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 image_description: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 initscript: Optional[pulumi.Input[str]] = None,
                 ipv4: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 rate: Optional[pulumi.Input[int]] = None,
                 region_id: Optional[pulumi.Input[str]] = None,
                 size_id: Optional[pulumi.Input[str]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 wait_for_ip: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Server resources.
        :param pulumi.Input[str] created: The creation date of the server.
        :param pulumi.Input[str] host: The host for the server to reside on.
        :param pulumi.Input[str] image_description: The description of the image installed on the server.
        :param pulumi.Input[str] image_id: The image ID to use on the server.
        :param pulumi.Input[str] initscript: A script to run on first boot of the server. Only hosts with initScript enabled can use this feature.
        :param pulumi.Input[str] ipv4: The name of the key.
        :param pulumi.Input[str] name: The name of the server.
        :param pulumi.Input[str] password: The root user password to set on the server. Must be used if no SSH keys designated.
        :param pulumi.Input[int] rate: The hourly rate of the server that will be deducted from your account balance every hour.
        :param pulumi.Input[str] region_id: The region ID of the location that the server will reside at.
        :param pulumi.Input[str] size_id: The size ID of the server to be provisioned to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_keys: An array of SSH key IDs to place on the server for authentication. Must be used if no password is designated of if the selected image does not support passwords.
        :param pulumi.Input[str] status: The name of the key.
        :param pulumi.Input[bool] wait_for_ip: Wait to get IP Address
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if image_description is not None:
            pulumi.set(__self__, "image_description", image_description)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if initscript is not None:
            pulumi.set(__self__, "initscript", initscript)
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if rate is not None:
            pulumi.set(__self__, "rate", rate)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if size_id is not None:
            pulumi.set(__self__, "size_id", size_id)
        if ssh_keys is not None:
            pulumi.set(__self__, "ssh_keys", ssh_keys)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if wait_for_ip is not None:
            pulumi.set(__self__, "wait_for_ip", wait_for_ip)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[str]]:
        """
        The creation date of the server.
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The host for the server to reside on.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="imageDescription")
    def image_description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the image installed on the server.
        """
        return pulumi.get(self, "image_description")

    @image_description.setter
    def image_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_description", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        The image ID to use on the server.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter
    def initscript(self) -> Optional[pulumi.Input[str]]:
        """
        A script to run on first boot of the server. Only hosts with initScript enabled can use this feature.
        """
        return pulumi.get(self, "initscript")

    @initscript.setter
    def initscript(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initscript", value)

    @property
    @pulumi.getter
    def ipv4(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the key.
        """
        return pulumi.get(self, "ipv4")

    @ipv4.setter
    def ipv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the server.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The root user password to set on the server. Must be used if no SSH keys designated.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def rate(self) -> Optional[pulumi.Input[int]]:
        """
        The hourly rate of the server that will be deducted from your account balance every hour.
        """
        return pulumi.get(self, "rate")

    @rate.setter
    def rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rate", value)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[str]]:
        """
        The region ID of the location that the server will reside at.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_id", value)

    @property
    @pulumi.getter(name="sizeId")
    def size_id(self) -> Optional[pulumi.Input[str]]:
        """
        The size ID of the server to be provisioned to.
        """
        return pulumi.get(self, "size_id")

    @size_id.setter
    def size_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_id", value)

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of SSH key IDs to place on the server for authentication. Must be used if no password is designated of if the selected image does not support passwords.
        """
        return pulumi.get(self, "ssh_keys")

    @ssh_keys.setter
    def ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssh_keys", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the key.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="waitForIp")
    def wait_for_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        Wait to get IP Address
        """
        return pulumi.get(self, "wait_for_ip")

    @wait_for_ip.setter
    def wait_for_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wait_for_ip", value)


class Server(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 initscript: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 region_id: Optional[pulumi.Input[str]] = None,
                 size_id: Optional[pulumi.Input[str]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 wait_for_ip: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Virtual Machine Resource. Matches https://developers.bitlaunch.io/reference/server-object

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] host: The host for the server to reside on.
        :param pulumi.Input[str] image_id: The image ID to use on the server.
        :param pulumi.Input[str] initscript: A script to run on first boot of the server. Only hosts with initScript enabled can use this feature.
        :param pulumi.Input[str] name: The name of the server.
        :param pulumi.Input[str] password: The root user password to set on the server. Must be used if no SSH keys designated.
        :param pulumi.Input[str] region_id: The region ID of the location that the server will reside at.
        :param pulumi.Input[str] size_id: The size ID of the server to be provisioned to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_keys: An array of SSH key IDs to place on the server for authentication. Must be used if no password is designated of if the selected image does not support passwords.
        :param pulumi.Input[bool] wait_for_ip: Wait to get IP Address
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Virtual Machine Resource. Matches https://developers.bitlaunch.io/reference/server-object

        :param str resource_name: The name of the resource.
        :param ServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 initscript: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 region_id: Optional[pulumi.Input[str]] = None,
                 size_id: Optional[pulumi.Input[str]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 wait_for_ip: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServerArgs.__new__(ServerArgs)

            if host is None and not opts.urn:
                raise TypeError("Missing required property 'host'")
            __props__.__dict__["host"] = host
            if image_id is None and not opts.urn:
                raise TypeError("Missing required property 'image_id'")
            __props__.__dict__["image_id"] = image_id
            __props__.__dict__["initscript"] = initscript
            __props__.__dict__["name"] = name
            __props__.__dict__["password"] = password
            if region_id is None and not opts.urn:
                raise TypeError("Missing required property 'region_id'")
            __props__.__dict__["region_id"] = region_id
            if size_id is None and not opts.urn:
                raise TypeError("Missing required property 'size_id'")
            __props__.__dict__["size_id"] = size_id
            __props__.__dict__["ssh_keys"] = ssh_keys
            __props__.__dict__["wait_for_ip"] = wait_for_ip
            __props__.__dict__["created"] = None
            __props__.__dict__["image_description"] = None
            __props__.__dict__["ipv4"] = None
            __props__.__dict__["rate"] = None
            __props__.__dict__["status"] = None
        super(Server, __self__).__init__(
            'bitlaunch:index/server:Server',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created: Optional[pulumi.Input[str]] = None,
            host: Optional[pulumi.Input[str]] = None,
            image_description: Optional[pulumi.Input[str]] = None,
            image_id: Optional[pulumi.Input[str]] = None,
            initscript: Optional[pulumi.Input[str]] = None,
            ipv4: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            rate: Optional[pulumi.Input[int]] = None,
            region_id: Optional[pulumi.Input[str]] = None,
            size_id: Optional[pulumi.Input[str]] = None,
            ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            wait_for_ip: Optional[pulumi.Input[bool]] = None) -> 'Server':
        """
        Get an existing Server resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created: The creation date of the server.
        :param pulumi.Input[str] host: The host for the server to reside on.
        :param pulumi.Input[str] image_description: The description of the image installed on the server.
        :param pulumi.Input[str] image_id: The image ID to use on the server.
        :param pulumi.Input[str] initscript: A script to run on first boot of the server. Only hosts with initScript enabled can use this feature.
        :param pulumi.Input[str] ipv4: The name of the key.
        :param pulumi.Input[str] name: The name of the server.
        :param pulumi.Input[str] password: The root user password to set on the server. Must be used if no SSH keys designated.
        :param pulumi.Input[int] rate: The hourly rate of the server that will be deducted from your account balance every hour.
        :param pulumi.Input[str] region_id: The region ID of the location that the server will reside at.
        :param pulumi.Input[str] size_id: The size ID of the server to be provisioned to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_keys: An array of SSH key IDs to place on the server for authentication. Must be used if no password is designated of if the selected image does not support passwords.
        :param pulumi.Input[str] status: The name of the key.
        :param pulumi.Input[bool] wait_for_ip: Wait to get IP Address
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServerState.__new__(_ServerState)

        __props__.__dict__["created"] = created
        __props__.__dict__["host"] = host
        __props__.__dict__["image_description"] = image_description
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["initscript"] = initscript
        __props__.__dict__["ipv4"] = ipv4
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["rate"] = rate
        __props__.__dict__["region_id"] = region_id
        __props__.__dict__["size_id"] = size_id
        __props__.__dict__["ssh_keys"] = ssh_keys
        __props__.__dict__["status"] = status
        __props__.__dict__["wait_for_ip"] = wait_for_ip
        return Server(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def created(self) -> pulumi.Output[str]:
        """
        The creation date of the server.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        The host for the server to reside on.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="imageDescription")
    def image_description(self) -> pulumi.Output[str]:
        """
        The description of the image installed on the server.
        """
        return pulumi.get(self, "image_description")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[str]:
        """
        The image ID to use on the server.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter
    def initscript(self) -> pulumi.Output[Optional[str]]:
        """
        A script to run on first boot of the server. Only hosts with initScript enabled can use this feature.
        """
        return pulumi.get(self, "initscript")

    @property
    @pulumi.getter
    def ipv4(self) -> pulumi.Output[str]:
        """
        The name of the key.
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the server.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        The root user password to set on the server. Must be used if no SSH keys designated.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def rate(self) -> pulumi.Output[int]:
        """
        The hourly rate of the server that will be deducted from your account balance every hour.
        """
        return pulumi.get(self, "rate")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Output[str]:
        """
        The region ID of the location that the server will reside at.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="sizeId")
    def size_id(self) -> pulumi.Output[str]:
        """
        The size ID of the server to be provisioned to.
        """
        return pulumi.get(self, "size_id")

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        An array of SSH key IDs to place on the server for authentication. Must be used if no password is designated of if the selected image does not support passwords.
        """
        return pulumi.get(self, "ssh_keys")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The name of the key.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="waitForIp")
    def wait_for_ip(self) -> pulumi.Output[Optional[bool]]:
        """
        Wait to get IP Address
        """
        return pulumi.get(self, "wait_for_ip")

