// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Bitlaunch
{
    public static class GetRegion
    {
        /// <summary>
        /// Holds available region configurations for a server. Matches https://developers.bitlaunch.io/reference/host-region-object
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Bitlaunch = Pulumi.Bitlaunch;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var token = config.RequireObject&lt;dynamic&gt;("token");
        ///     var example = Bitlaunch.GetRegion.Invoke(new()
        ///     {
        ///         Host = "DigitalOcean",
        ///         RegionName = "New York",
        ///         Slug = "nyc1",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetRegionResult> InvokeAsync(GetRegionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRegionResult>("bitlaunch:index/getRegion:getRegion", args ?? new GetRegionArgs(), options.WithDefaults());

        /// <summary>
        /// Holds available region configurations for a server. Matches https://developers.bitlaunch.io/reference/host-region-object
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Bitlaunch = Pulumi.Bitlaunch;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var token = config.RequireObject&lt;dynamic&gt;("token");
        ///     var example = Bitlaunch.GetRegion.Invoke(new()
        ///     {
        ///         Host = "DigitalOcean",
        ///         RegionName = "New York",
        ///         Slug = "nyc1",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetRegionResult> Invoke(GetRegionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegionResult>("bitlaunch:index/getRegion:getRegion", args ?? new GetRegionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Host Provider (DigitalOcean, Vultr, etc.)
        /// </summary>
        [Input("host", required: true)]
        public string Host { get; set; } = null!;

        /// <summary>
        /// The name of the Region.
        /// </summary>
        [Input("regionName")]
        public string? RegionName { get; set; }

        /// <summary>
        /// The Specific Subregion slug.
        /// </summary>
        [Input("slug")]
        public string? Slug { get; set; }

        public GetRegionArgs()
        {
        }
        public static new GetRegionArgs Empty => new GetRegionArgs();
    }

    public sealed class GetRegionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Host Provider (DigitalOcean, Vultr, etc.)
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// The name of the Region.
        /// </summary>
        [Input("regionName")]
        public Input<string>? RegionName { get; set; }

        /// <summary>
        /// The Specific Subregion slug.
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        public GetRegionInvokeArgs()
        {
        }
        public static new GetRegionInvokeArgs Empty => new GetRegionInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegionResult
    {
        /// <summary>
        /// Host Provider (DigitalOcean, Vultr, etc.)
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ISO code for the region.
        /// </summary>
        public readonly string Iso;
        /// <summary>
        /// The name of the Region.
        /// </summary>
        public readonly string? RegionName;
        /// <summary>
        /// The Specific Subregion slug.
        /// </summary>
        public readonly string? Slug;
        /// <summary>
        /// A list of the unavailable sizes for this subregion.
        /// </summary>
        public readonly ImmutableArray<string> UnavailableSizes;

        [OutputConstructor]
        private GetRegionResult(
            string host,

            string id,

            string iso,

            string? regionName,

            string? slug,

            ImmutableArray<string> unavailableSizes)
        {
            Host = host;
            Id = id;
            Iso = iso;
            RegionName = regionName;
            Slug = slug;
            UnavailableSizes = unavailableSizes;
        }
    }
}
