// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitlaunch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/webwarrior-ws/pulumi-bitlaunch/sdk/go/bitlaunch/internal"
)

// SSH Key resouce. Matches https://developers.bitlaunch.io/reference/ssh-key-object-1
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/webwarrior-ws/pulumi-bitlaunch/sdk/go/bitlaunch"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			token := cfg.RequireObject("token")
//			sshPubkey := cfg.RequireObject("sshPubkey")
//			_, err := bitlaunch.NewSshkey(ctx, "tfSshkey", &bitlaunch.SshkeyArgs{
//				Content: pulumi.Any(sshPubkey),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type Sshkey struct {
	pulumi.CustomResourceState

	// The public portion of the SSH key.
	Content pulumi.StringOutput `pulumi:"content"`
	// The creation date of the key.
	Created pulumi.StringOutput `pulumi:"created"`
	// The name of the key.
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// The name of the key.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewSshkey registers a new resource with the given unique name, arguments, and options.
func NewSshkey(ctx *pulumi.Context,
	name string, args *SshkeyArgs, opts ...pulumi.ResourceOption) (*Sshkey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Sshkey
	err := ctx.RegisterResource("bitlaunch:index/sshkey:Sshkey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSshkey gets an existing Sshkey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSshkey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SshkeyState, opts ...pulumi.ResourceOption) (*Sshkey, error) {
	var resource Sshkey
	err := ctx.ReadResource("bitlaunch:index/sshkey:Sshkey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Sshkey resources.
type sshkeyState struct {
	// The public portion of the SSH key.
	Content *string `pulumi:"content"`
	// The creation date of the key.
	Created *string `pulumi:"created"`
	// The name of the key.
	Fingerprint *string `pulumi:"fingerprint"`
	// The name of the key.
	Name *string `pulumi:"name"`
}

type SshkeyState struct {
	// The public portion of the SSH key.
	Content pulumi.StringPtrInput
	// The creation date of the key.
	Created pulumi.StringPtrInput
	// The name of the key.
	Fingerprint pulumi.StringPtrInput
	// The name of the key.
	Name pulumi.StringPtrInput
}

func (SshkeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*sshkeyState)(nil)).Elem()
}

type sshkeyArgs struct {
	// The public portion of the SSH key.
	Content string `pulumi:"content"`
	// The name of the key.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Sshkey resource.
type SshkeyArgs struct {
	// The public portion of the SSH key.
	Content pulumi.StringInput
	// The name of the key.
	Name pulumi.StringPtrInput
}

func (SshkeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sshkeyArgs)(nil)).Elem()
}

type SshkeyInput interface {
	pulumi.Input

	ToSshkeyOutput() SshkeyOutput
	ToSshkeyOutputWithContext(ctx context.Context) SshkeyOutput
}

func (*Sshkey) ElementType() reflect.Type {
	return reflect.TypeOf((**Sshkey)(nil)).Elem()
}

func (i *Sshkey) ToSshkeyOutput() SshkeyOutput {
	return i.ToSshkeyOutputWithContext(context.Background())
}

func (i *Sshkey) ToSshkeyOutputWithContext(ctx context.Context) SshkeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshkeyOutput)
}

// SshkeyArrayInput is an input type that accepts SshkeyArray and SshkeyArrayOutput values.
// You can construct a concrete instance of `SshkeyArrayInput` via:
//
//	SshkeyArray{ SshkeyArgs{...} }
type SshkeyArrayInput interface {
	pulumi.Input

	ToSshkeyArrayOutput() SshkeyArrayOutput
	ToSshkeyArrayOutputWithContext(context.Context) SshkeyArrayOutput
}

type SshkeyArray []SshkeyInput

func (SshkeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sshkey)(nil)).Elem()
}

func (i SshkeyArray) ToSshkeyArrayOutput() SshkeyArrayOutput {
	return i.ToSshkeyArrayOutputWithContext(context.Background())
}

func (i SshkeyArray) ToSshkeyArrayOutputWithContext(ctx context.Context) SshkeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshkeyArrayOutput)
}

// SshkeyMapInput is an input type that accepts SshkeyMap and SshkeyMapOutput values.
// You can construct a concrete instance of `SshkeyMapInput` via:
//
//	SshkeyMap{ "key": SshkeyArgs{...} }
type SshkeyMapInput interface {
	pulumi.Input

	ToSshkeyMapOutput() SshkeyMapOutput
	ToSshkeyMapOutputWithContext(context.Context) SshkeyMapOutput
}

type SshkeyMap map[string]SshkeyInput

func (SshkeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sshkey)(nil)).Elem()
}

func (i SshkeyMap) ToSshkeyMapOutput() SshkeyMapOutput {
	return i.ToSshkeyMapOutputWithContext(context.Background())
}

func (i SshkeyMap) ToSshkeyMapOutputWithContext(ctx context.Context) SshkeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshkeyMapOutput)
}

type SshkeyOutput struct{ *pulumi.OutputState }

func (SshkeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sshkey)(nil)).Elem()
}

func (o SshkeyOutput) ToSshkeyOutput() SshkeyOutput {
	return o
}

func (o SshkeyOutput) ToSshkeyOutputWithContext(ctx context.Context) SshkeyOutput {
	return o
}

// The public portion of the SSH key.
func (o SshkeyOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *Sshkey) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// The creation date of the key.
func (o SshkeyOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *Sshkey) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// The name of the key.
func (o SshkeyOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *Sshkey) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

// The name of the key.
func (o SshkeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Sshkey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type SshkeyArrayOutput struct{ *pulumi.OutputState }

func (SshkeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sshkey)(nil)).Elem()
}

func (o SshkeyArrayOutput) ToSshkeyArrayOutput() SshkeyArrayOutput {
	return o
}

func (o SshkeyArrayOutput) ToSshkeyArrayOutputWithContext(ctx context.Context) SshkeyArrayOutput {
	return o
}

func (o SshkeyArrayOutput) Index(i pulumi.IntInput) SshkeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Sshkey {
		return vs[0].([]*Sshkey)[vs[1].(int)]
	}).(SshkeyOutput)
}

type SshkeyMapOutput struct{ *pulumi.OutputState }

func (SshkeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sshkey)(nil)).Elem()
}

func (o SshkeyMapOutput) ToSshkeyMapOutput() SshkeyMapOutput {
	return o
}

func (o SshkeyMapOutput) ToSshkeyMapOutputWithContext(ctx context.Context) SshkeyMapOutput {
	return o
}

func (o SshkeyMapOutput) MapIndex(k pulumi.StringInput) SshkeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Sshkey {
		return vs[0].(map[string]*Sshkey)[vs[1].(string)]
	}).(SshkeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SshkeyInput)(nil)).Elem(), &Sshkey{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshkeyArrayInput)(nil)).Elem(), SshkeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshkeyMapInput)(nil)).Elem(), SshkeyMap{})
	pulumi.RegisterOutputType(SshkeyOutput{})
	pulumi.RegisterOutputType(SshkeyArrayOutput{})
	pulumi.RegisterOutputType(SshkeyMapOutput{})
}
