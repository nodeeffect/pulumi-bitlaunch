// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Virtual Machine Resource. Matches https://developers.bitlaunch.io/reference/server-object
 */
export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bitlaunch:index/server:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    /**
     * The creation date of the server.
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * The host for the server to reside on.
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * The description of the image installed on the server.
     */
    public /*out*/ readonly imageDescription!: pulumi.Output<string>;
    /**
     * The image ID to use on the server.
     */
    public readonly imageId!: pulumi.Output<string>;
    /**
     * A script to run on first boot of the server. Only hosts with initScript enabled can use this feature.
     */
    public readonly initscript!: pulumi.Output<string | undefined>;
    /**
     * The name of the key.
     */
    public /*out*/ readonly ipv4!: pulumi.Output<string>;
    /**
     * The name of the server.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The root user password to set on the server. Must be used if no SSH keys designated.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The hourly rate of the server that will be deducted from your account balance every hour.
     */
    public /*out*/ readonly rate!: pulumi.Output<number>;
    /**
     * The region ID of the location that the server will reside at.
     */
    public readonly regionId!: pulumi.Output<string>;
    /**
     * The size ID of the server to be provisioned to.
     */
    public readonly sizeId!: pulumi.Output<string>;
    /**
     * An array of SSH key IDs to place on the server for authentication. Must be used if no password is designated of if the selected image does not support passwords.
     */
    public readonly sshKeys!: pulumi.Output<string[] | undefined>;
    /**
     * The name of the key.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Wait to get IP Address
     */
    public readonly waitForIp!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerState | undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["imageDescription"] = state ? state.imageDescription : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["initscript"] = state ? state.initscript : undefined;
            resourceInputs["ipv4"] = state ? state.ipv4 : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["rate"] = state ? state.rate : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["sizeId"] = state ? state.sizeId : undefined;
            resourceInputs["sshKeys"] = state ? state.sshKeys : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["waitForIp"] = state ? state.waitForIp : undefined;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.regionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionId'");
            }
            if ((!args || args.sizeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sizeId'");
            }
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["initscript"] = args ? args.initscript : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["regionId"] = args ? args.regionId : undefined;
            resourceInputs["sizeId"] = args ? args.sizeId : undefined;
            resourceInputs["sshKeys"] = args ? args.sshKeys : undefined;
            resourceInputs["waitForIp"] = args ? args.waitForIp : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["imageDescription"] = undefined /*out*/;
            resourceInputs["ipv4"] = undefined /*out*/;
            resourceInputs["rate"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Server.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    /**
     * The creation date of the server.
     */
    created?: pulumi.Input<string>;
    /**
     * The host for the server to reside on.
     */
    host?: pulumi.Input<string>;
    /**
     * The description of the image installed on the server.
     */
    imageDescription?: pulumi.Input<string>;
    /**
     * The image ID to use on the server.
     */
    imageId?: pulumi.Input<string>;
    /**
     * A script to run on first boot of the server. Only hosts with initScript enabled can use this feature.
     */
    initscript?: pulumi.Input<string>;
    /**
     * The name of the key.
     */
    ipv4?: pulumi.Input<string>;
    /**
     * The name of the server.
     */
    name?: pulumi.Input<string>;
    /**
     * The root user password to set on the server. Must be used if no SSH keys designated.
     */
    password?: pulumi.Input<string>;
    /**
     * The hourly rate of the server that will be deducted from your account balance every hour.
     */
    rate?: pulumi.Input<number>;
    /**
     * The region ID of the location that the server will reside at.
     */
    regionId?: pulumi.Input<string>;
    /**
     * The size ID of the server to be provisioned to.
     */
    sizeId?: pulumi.Input<string>;
    /**
     * An array of SSH key IDs to place on the server for authentication. Must be used if no password is designated of if the selected image does not support passwords.
     */
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the key.
     */
    status?: pulumi.Input<string>;
    /**
     * Wait to get IP Address
     */
    waitForIp?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    /**
     * The host for the server to reside on.
     */
    host: pulumi.Input<string>;
    /**
     * The image ID to use on the server.
     */
    imageId: pulumi.Input<string>;
    /**
     * A script to run on first boot of the server. Only hosts with initScript enabled can use this feature.
     */
    initscript?: pulumi.Input<string>;
    /**
     * The name of the server.
     */
    name?: pulumi.Input<string>;
    /**
     * The root user password to set on the server. Must be used if no SSH keys designated.
     */
    password?: pulumi.Input<string>;
    /**
     * The region ID of the location that the server will reside at.
     */
    regionId: pulumi.Input<string>;
    /**
     * The size ID of the server to be provisioned to.
     */
    sizeId: pulumi.Input<string>;
    /**
     * An array of SSH key IDs to place on the server for authentication. Must be used if no password is designated of if the selected image does not support passwords.
     */
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Wait to get IP Address
     */
    waitForIp?: pulumi.Input<boolean>;
}
