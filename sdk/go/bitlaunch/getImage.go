// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitlaunch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/webwarrior-ws/pulumi-bitlaunch/sdk/go/bitlaunch/internal"
)

// Holds details on Images and apps available when configuring a server. Matches https://developers.bitlaunch.io/reference/host-image-object
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/webwarrior-ws/pulumi-bitlaunch/sdk/go/bitlaunch"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			token := cfg.RequireObject("token")
//			_, err := bitlaunch.GetImage(ctx, &bitlaunch.GetImageArgs{
//				Host:       "DigitalOcean",
//				DistroName: pulumi.StringRef("Ubuntu"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetImage(ctx *pulumi.Context, args *GetImageArgs, opts ...pulumi.InvokeOption) (*GetImageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetImageResult
	err := ctx.Invoke("bitlaunch:index/getImage:getImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImage.
type GetImageArgs struct {
	// The name of the Linux Distibution or one-click app.
	DistroName *string `pulumi:"distroName"`
	// Host Provider (DigitalOcean, Vultr, etc.)
	Host string `pulumi:"host"`
	// The Specific Image Version
	VersionName *string `pulumi:"versionName"`
}

// A collection of values returned by getImage.
type GetImageResult struct {
	// The name of the Linux Distibution or one-click app.
	DistroName *string `pulumi:"distroName"`
	// Extra monthly cost.
	ExtraCostPerMonth int `pulumi:"extraCostPerMonth"`
	// Host Provider (DigitalOcean, Vultr, etc.)
	Host string `pulumi:"host"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Flag to determine if the image is Windows-based.
	IsWindows bool `pulumi:"isWindows"`
	// The minimum disk size available in GB.
	MinDiskSize int `pulumi:"minDiskSize"`
	// If setting a password is supported.
	PasswordUnsupported bool `pulumi:"passwordUnsupported"`
	// The type of the image: image or app.
	Type string `pulumi:"type"`
	// A list of unavailable subregion IDs.
	UnavailableRegions []string `pulumi:"unavailableRegions"`
	// The Specific Image Version
	VersionName *string `pulumi:"versionName"`
}

func GetImageOutput(ctx *pulumi.Context, args GetImageOutputArgs, opts ...pulumi.InvokeOption) GetImageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetImageResult, error) {
			args := v.(GetImageArgs)
			r, err := GetImage(ctx, &args, opts...)
			var s GetImageResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetImageResultOutput)
}

// A collection of arguments for invoking getImage.
type GetImageOutputArgs struct {
	// The name of the Linux Distibution or one-click app.
	DistroName pulumi.StringPtrInput `pulumi:"distroName"`
	// Host Provider (DigitalOcean, Vultr, etc.)
	Host pulumi.StringInput `pulumi:"host"`
	// The Specific Image Version
	VersionName pulumi.StringPtrInput `pulumi:"versionName"`
}

func (GetImageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageArgs)(nil)).Elem()
}

// A collection of values returned by getImage.
type GetImageResultOutput struct{ *pulumi.OutputState }

func (GetImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageResult)(nil)).Elem()
}

func (o GetImageResultOutput) ToGetImageResultOutput() GetImageResultOutput {
	return o
}

func (o GetImageResultOutput) ToGetImageResultOutputWithContext(ctx context.Context) GetImageResultOutput {
	return o
}

// The name of the Linux Distibution or one-click app.
func (o GetImageResultOutput) DistroName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImageResult) *string { return v.DistroName }).(pulumi.StringPtrOutput)
}

// Extra monthly cost.
func (o GetImageResultOutput) ExtraCostPerMonth() pulumi.IntOutput {
	return o.ApplyT(func(v GetImageResult) int { return v.ExtraCostPerMonth }).(pulumi.IntOutput)
}

// Host Provider (DigitalOcean, Vultr, etc.)
func (o GetImageResultOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.Host }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetImageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.Id }).(pulumi.StringOutput)
}

// Flag to determine if the image is Windows-based.
func (o GetImageResultOutput) IsWindows() pulumi.BoolOutput {
	return o.ApplyT(func(v GetImageResult) bool { return v.IsWindows }).(pulumi.BoolOutput)
}

// The minimum disk size available in GB.
func (o GetImageResultOutput) MinDiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetImageResult) int { return v.MinDiskSize }).(pulumi.IntOutput)
}

// If setting a password is supported.
func (o GetImageResultOutput) PasswordUnsupported() pulumi.BoolOutput {
	return o.ApplyT(func(v GetImageResult) bool { return v.PasswordUnsupported }).(pulumi.BoolOutput)
}

// The type of the image: image or app.
func (o GetImageResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.Type }).(pulumi.StringOutput)
}

// A list of unavailable subregion IDs.
func (o GetImageResultOutput) UnavailableRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetImageResult) []string { return v.UnavailableRegions }).(pulumi.StringArrayOutput)
}

// The Specific Image Version
func (o GetImageResultOutput) VersionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImageResult) *string { return v.VersionName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetImageResultOutput{})
}
