// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Bitlaunch
{
    /// <summary>
    /// Virtual Machine Resource. Matches https://developers.bitlaunch.io/reference/server-object
    /// </summary>
    [BitlaunchResourceType("bitlaunch:index/server:Server")]
    public partial class Server : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The creation date of the server.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// The host for the server to reside on.
        /// </summary>
        [Output("host")]
        public Output<string> Host { get; private set; } = null!;

        /// <summary>
        /// The description of the image installed on the server.
        /// </summary>
        [Output("imageDescription")]
        public Output<string> ImageDescription { get; private set; } = null!;

        /// <summary>
        /// The image ID to use on the server.
        /// </summary>
        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        /// <summary>
        /// A script to run on first boot of the server. Only hosts with initScript enabled can use this feature.
        /// </summary>
        [Output("initscript")]
        public Output<string?> Initscript { get; private set; } = null!;

        /// <summary>
        /// The name of the key.
        /// </summary>
        [Output("ipv4")]
        public Output<string> Ipv4 { get; private set; } = null!;

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The root user password to set on the server. Must be used if no SSH keys designated.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The hourly rate of the server that will be deducted from your account balance every hour.
        /// </summary>
        [Output("rate")]
        public Output<int> Rate { get; private set; } = null!;

        /// <summary>
        /// The region ID of the location that the server will reside at.
        /// </summary>
        [Output("regionId")]
        public Output<string> RegionId { get; private set; } = null!;

        /// <summary>
        /// The size ID of the server to be provisioned to.
        /// </summary>
        [Output("sizeId")]
        public Output<string> SizeId { get; private set; } = null!;

        /// <summary>
        /// An array of SSH key IDs to place on the server for authentication. Must be used if no password is designated of if the selected image does not support passwords.
        /// </summary>
        [Output("sshKeys")]
        public Output<ImmutableArray<string>> SshKeys { get; private set; } = null!;

        /// <summary>
        /// The name of the key.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Wait to get IP Address
        /// </summary>
        [Output("waitForIp")]
        public Output<bool?> WaitForIp { get; private set; } = null!;


        /// <summary>
        /// Create a Server resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Server(string name, ServerArgs args, CustomResourceOptions? options = null)
            : base("bitlaunch:index/server:Server", name, args ?? new ServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Server(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
            : base("bitlaunch:index/server:Server", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Server resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Server Get(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
        {
            return new Server(name, id, state, options);
        }
    }

    public sealed class ServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The host for the server to reside on.
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// The image ID to use on the server.
        /// </summary>
        [Input("imageId", required: true)]
        public Input<string> ImageId { get; set; } = null!;

        /// <summary>
        /// A script to run on first boot of the server. Only hosts with initScript enabled can use this feature.
        /// </summary>
        [Input("initscript")]
        public Input<string>? Initscript { get; set; }

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The root user password to set on the server. Must be used if no SSH keys designated.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The region ID of the location that the server will reside at.
        /// </summary>
        [Input("regionId", required: true)]
        public Input<string> RegionId { get; set; } = null!;

        /// <summary>
        /// The size ID of the server to be provisioned to.
        /// </summary>
        [Input("sizeId", required: true)]
        public Input<string> SizeId { get; set; } = null!;

        [Input("sshKeys")]
        private InputList<string>? _sshKeys;

        /// <summary>
        /// An array of SSH key IDs to place on the server for authentication. Must be used if no password is designated of if the selected image does not support passwords.
        /// </summary>
        public InputList<string> SshKeys
        {
            get => _sshKeys ?? (_sshKeys = new InputList<string>());
            set => _sshKeys = value;
        }

        /// <summary>
        /// Wait to get IP Address
        /// </summary>
        [Input("waitForIp")]
        public Input<bool>? WaitForIp { get; set; }

        public ServerArgs()
        {
        }
        public static new ServerArgs Empty => new ServerArgs();
    }

    public sealed class ServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The creation date of the server.
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// The host for the server to reside on.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// The description of the image installed on the server.
        /// </summary>
        [Input("imageDescription")]
        public Input<string>? ImageDescription { get; set; }

        /// <summary>
        /// The image ID to use on the server.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// A script to run on first boot of the server. Only hosts with initScript enabled can use this feature.
        /// </summary>
        [Input("initscript")]
        public Input<string>? Initscript { get; set; }

        /// <summary>
        /// The name of the key.
        /// </summary>
        [Input("ipv4")]
        public Input<string>? Ipv4 { get; set; }

        /// <summary>
        /// The name of the server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The root user password to set on the server. Must be used if no SSH keys designated.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The hourly rate of the server that will be deducted from your account balance every hour.
        /// </summary>
        [Input("rate")]
        public Input<int>? Rate { get; set; }

        /// <summary>
        /// The region ID of the location that the server will reside at.
        /// </summary>
        [Input("regionId")]
        public Input<string>? RegionId { get; set; }

        /// <summary>
        /// The size ID of the server to be provisioned to.
        /// </summary>
        [Input("sizeId")]
        public Input<string>? SizeId { get; set; }

        [Input("sshKeys")]
        private InputList<string>? _sshKeys;

        /// <summary>
        /// An array of SSH key IDs to place on the server for authentication. Must be used if no password is designated of if the selected image does not support passwords.
        /// </summary>
        public InputList<string> SshKeys
        {
            get => _sshKeys ?? (_sshKeys = new InputList<string>());
            set => _sshKeys = value;
        }

        /// <summary>
        /// The name of the key.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Wait to get IP Address
        /// </summary>
        [Input("waitForIp")]
        public Input<bool>? WaitForIp { get; set; }

        public ServerState()
        {
        }
        public static new ServerState Empty => new ServerState();
    }
}
