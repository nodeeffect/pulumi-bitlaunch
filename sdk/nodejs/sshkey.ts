// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * SSH Key resouce. Matches https://developers.bitlaunch.io/reference/ssh-key-object-1
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as bitlaunch from "@pulumi/bitlaunch";
 *
 * const config = new pulumi.Config();
 * const token = config.requireObject("token");
 * const sshPubkey = config.requireObject("sshPubkey");
 * const tfSshkey = new bitlaunch.Sshkey("tfSshkey", {content: sshPubkey});
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class Sshkey extends pulumi.CustomResource {
    /**
     * Get an existing Sshkey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SshkeyState, opts?: pulumi.CustomResourceOptions): Sshkey {
        return new Sshkey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bitlaunch:index/sshkey:Sshkey';

    /**
     * Returns true if the given object is an instance of Sshkey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sshkey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sshkey.__pulumiType;
    }

    /**
     * The public portion of the SSH key.
     */
    public readonly content!: pulumi.Output<string>;
    /**
     * The creation date of the key.
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * The name of the key.
     */
    public /*out*/ readonly fingerprint!: pulumi.Output<string>;
    /**
     * The name of the key.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a Sshkey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SshkeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SshkeyArgs | SshkeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SshkeyState | undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["fingerprint"] = state ? state.fingerprint : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as SshkeyArgs | undefined;
            if ((!args || args.content === undefined) && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["fingerprint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Sshkey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Sshkey resources.
 */
export interface SshkeyState {
    /**
     * The public portion of the SSH key.
     */
    content?: pulumi.Input<string>;
    /**
     * The creation date of the key.
     */
    created?: pulumi.Input<string>;
    /**
     * The name of the key.
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * The name of the key.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Sshkey resource.
 */
export interface SshkeyArgs {
    /**
     * The public portion of the SSH key.
     */
    content: pulumi.Input<string>;
    /**
     * The name of the key.
     */
    name?: pulumi.Input<string>;
}
