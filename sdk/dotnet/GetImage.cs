// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Bitlaunch
{
    public static class GetImage
    {
        /// <summary>
        /// Holds details on Images and apps available when configuring a server. Matches https://developers.bitlaunch.io/reference/host-image-object
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Bitlaunch = Pulumi.Bitlaunch;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var token = config.RequireObject&lt;dynamic&gt;("token");
        ///     var example = Bitlaunch.GetImage.Invoke(new()
        ///     {
        ///         Host = "DigitalOcean",
        ///         DistroName = "Ubuntu",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetImageResult> InvokeAsync(GetImageArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImageResult>("bitlaunch:index/getImage:getImage", args ?? new GetImageArgs(), options.WithDefaults());

        /// <summary>
        /// Holds details on Images and apps available when configuring a server. Matches https://developers.bitlaunch.io/reference/host-image-object
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Bitlaunch = Pulumi.Bitlaunch;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var token = config.RequireObject&lt;dynamic&gt;("token");
        ///     var example = Bitlaunch.GetImage.Invoke(new()
        ///     {
        ///         Host = "DigitalOcean",
        ///         DistroName = "Ubuntu",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetImageResult> Invoke(GetImageInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageResult>("bitlaunch:index/getImage:getImage", args ?? new GetImageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImageArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Linux Distibution or one-click app.
        /// </summary>
        [Input("distroName")]
        public string? DistroName { get; set; }

        /// <summary>
        /// Host Provider (DigitalOcean, Vultr, etc.)
        /// </summary>
        [Input("host", required: true)]
        public string Host { get; set; } = null!;

        /// <summary>
        /// The Specific Image Version
        /// </summary>
        [Input("versionName")]
        public string? VersionName { get; set; }

        public GetImageArgs()
        {
        }
        public static new GetImageArgs Empty => new GetImageArgs();
    }

    public sealed class GetImageInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Linux Distibution or one-click app.
        /// </summary>
        [Input("distroName")]
        public Input<string>? DistroName { get; set; }

        /// <summary>
        /// Host Provider (DigitalOcean, Vultr, etc.)
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// The Specific Image Version
        /// </summary>
        [Input("versionName")]
        public Input<string>? VersionName { get; set; }

        public GetImageInvokeArgs()
        {
        }
        public static new GetImageInvokeArgs Empty => new GetImageInvokeArgs();
    }


    [OutputType]
    public sealed class GetImageResult
    {
        /// <summary>
        /// The name of the Linux Distibution or one-click app.
        /// </summary>
        public readonly string? DistroName;
        /// <summary>
        /// Extra monthly cost.
        /// </summary>
        public readonly int ExtraCostPerMonth;
        /// <summary>
        /// Host Provider (DigitalOcean, Vultr, etc.)
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Flag to determine if the image is Windows-based.
        /// </summary>
        public readonly bool IsWindows;
        /// <summary>
        /// The minimum disk size available in GB.
        /// </summary>
        public readonly int MinDiskSize;
        /// <summary>
        /// If setting a password is supported.
        /// </summary>
        public readonly bool PasswordUnsupported;
        /// <summary>
        /// The type of the image: image or app.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// A list of unavailable subregion IDs.
        /// </summary>
        public readonly ImmutableArray<string> UnavailableRegions;
        /// <summary>
        /// The Specific Image Version
        /// </summary>
        public readonly string? VersionName;

        [OutputConstructor]
        private GetImageResult(
            string? distroName,

            int extraCostPerMonth,

            string host,

            string id,

            bool isWindows,

            int minDiskSize,

            bool passwordUnsupported,

            string type,

            ImmutableArray<string> unavailableRegions,

            string? versionName)
        {
            DistroName = distroName;
            ExtraCostPerMonth = extraCostPerMonth;
            Host = host;
            Id = id;
            IsWindows = isWindows;
            MinDiskSize = minDiskSize;
            PasswordUnsupported = passwordUnsupported;
            Type = type;
            UnavailableRegions = unavailableRegions;
            VersionName = versionName;
        }
    }
}
