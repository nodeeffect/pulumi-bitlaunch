// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetRegionArgs, GetRegionResult, GetRegionOutputArgs } from "./getRegion";
export const getRegion: typeof import("./getRegion").getRegion = null as any;
export const getRegionOutput: typeof import("./getRegion").getRegionOutput = null as any;
utilities.lazyLoad(exports, ["getRegion","getRegionOutput"], () => require("./getRegion"));

export { GetSizeArgs, GetSizeResult, GetSizeOutputArgs } from "./getSize";
export const getSize: typeof import("./getSize").getSize = null as any;
export const getSizeOutput: typeof import("./getSize").getSizeOutput = null as any;
utilities.lazyLoad(exports, ["getSize","getSizeOutput"], () => require("./getSize"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { SshkeyArgs, SshkeyState } from "./sshkey";
export type Sshkey = import("./sshkey").Sshkey;
export const Sshkey: typeof import("./sshkey").Sshkey = null as any;
utilities.lazyLoad(exports, ["Sshkey"], () => require("./sshkey"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "bitlaunch:index/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "bitlaunch:index/sshkey:Sshkey":
                return new Sshkey(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("bitlaunch", "index/server", _module)
pulumi.runtime.registerResourceModule("bitlaunch", "index/sshkey", _module)
pulumi.runtime.registerResourcePackage("bitlaunch", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:bitlaunch") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
